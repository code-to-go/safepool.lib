package security

import (
	"crypto/ed25519"
	"crypto/rand"
	"encoding/binary"
	"io"
	"github.com/code-to-go/safepool.lib/core"
	"github.com/code-to-go/safepool.lib/protocol"

	"github.com/golang/protobuf/proto"
)

type PublicKey ed25519.PublicKey
type PrivateKey ed25519.PrivateKey

const (
	PublicKeySize  = ed25519.PublicKeySize
	PrivateKeySize = ed25519.PrivateKeySize
	SignatureSize  = ed25519.SignatureSize
)

type SignedData struct {
	Signature [SignatureSize]byte
	Signer    PublicKey
}

type Public struct {
	Id    PublicKey
	Nick  string
	Email string
}

func NewIdentity() (model.Identity, error) {
	public, private, err := ed25519.GenerateKey(rand.Reader)
	if core.IsErr(err, "cannot generate ed25519 identity: %v") {
		return model.Identity{}, err
	}

	return model.Identity{
		Curve:   "ed25519",
		Public:  PublicKey(public),
		Private: PrivateKey(private),
	}, nil
}

func Sign(private PrivateKey, data []byte) ([]byte, error) {
	return ed25519.Sign(ed25519.PrivateKey(private), data), nil
}

func Verify(key PublicKey, data []byte, sig []byte) bool {
	return ed25519.Verify(ed25519.PublicKey(key), data, sig)
}

func SignAndWrite(private PrivateKey, data []byte, w io.Writer, signatures [][]byte) error {
	sign, err := Sign(private, data)
	if core.IsErr(err, "cannot sign data: %v") {
		return err
	}
	signedData := protocol.SignedData{
		Version: 1,
		Data:    data,
	}

	for _, s := range signatures {
		signedData.Signatures = append(signedData.Signatures, s)
	}
	signedData.Signatures = append(signedData.Signatures, sign)

	signedDataB, err := proto.Marshal(&signedData)
	if core.IsErr(err, "cannot marshal signed data: %v") {
		return err
	}

	lenB := make([]byte, 4)
	binary.BigEndian.PutUint32(lenB, uint32(len(signedDataB)))
	w.Write(lenB)
	_, err = w.Write(signedDataB)
	if core.IsErr(err, "cannot write signed data to stream: %v") {
		return err
	}
	return nil
}

func ReadAndVerify(publics []PublicKey, r io.Reader) (data []byte, signatures [][]byte, err error) {
	lenB := make([]byte, 4)
	_, err = r.Read(lenB)
	if core.IsErr(err, "cannot read length of data") {
		return nil, nil, err
	}

	data = make([]byte, binary.BigEndian.Uint32(lenB))
	_, err = r.Read(data)
	if core.IsErr(err, "cannot read signed data") {
		return nil, nil, err
	}

	var signedData protocol.SignedData
	err = proto.Unmarshal(data, &signedData)
	if core.IsErr(err, "cannot unmarshall signed data: %v") {
		return nil, nil, err
	}

	if signedData.Version >= 2.0 {
		return nil, nil, core.ErrInvalidVersion
	}

	verified := false
out:
	for _, s := range signedData.Signatures {
		for _, p := range publics {
			if Verify(p, signedData.Data, s) {
				verified = true
				break out
			}
		}
	}

	if verified {
		return signedData.Data, signedData.Signatures, nil
	} else {
		return nil, nil, core.ErrInvalidSignature
	}
}
